#version 460
//
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 7, std430)  buffer PDBuffer{
    vec4 PDs[];
};
//SSBO for principal curvatures
layout(binding = 8, std430)  buffer curvatureBufffer{
    float curvatures[];
};
layout(binding = 9, std430) readonly buffer vertexBuffer{
    vec4 vertices[];
};
layout(binding = 10, std430) readonly buffer normalBuffer{
    vec4 normals[];
};
layout(binding = 11, std430) readonly buffer indexBuffer{
    uint indices[];
};
layout(binding = 20, std430) readonly buffer adjacentFacesBuffer{
    int adjFaces[][20];
};
layout(binding = 21, std430) buffer q1Buffer{
    float q1s[];
};
layout(binding = 22, std430) buffer t1Buffer{
    vec2 t1s[];
};
layout(binding = 23, std430) buffer Dt1q1Buffer{
    float Dt1q1s[];
};
uniform vec3 viewPosition;

uniform uint verticesSize;
void main(){
    uint id = gl_GlobalInvocationID.x; //starts with 0
    if(id>=verticesSize) return;  //by vertex

    vec3 position = vertices[id].xyz;
    vec3 normal = normalize(normals[id].xyz);
    vec3 viewDir = normalize(viewPosition - position);
    vec3 maxPD = PDs[id].xyz;
    vec3 minPD = PDs[id+verticesSize].xyz;
    float maxCurv = curvatures[id];
    float minCurv = curvatures[id+verticesSize];

    float normalDotView = dot(viewDir,normal);
     //basis with principal directions projected to viewDirection
    float u = dot(viewDir,maxPD);
    float v = dot(viewDir,minPD);
    float u2 = u*u;
    float v2 = v*v;
    float uv = u*v;
    float csc2 = 1.0/(u2+v2);

    //Q is the view dependent curvature tensor
    //Q = SPbar^(-1)
    //maxCurv and minCurv are eigenvalues of S
    float sec_min1 = 1.0/abs(normalDotView) - 1.0;
    float Q11 = maxCurv * (1.0 + sec_min1 * u2*csc2);
    float Q12 = maxCurv * (      sec_min1 * uv*csc2);
    float Q21 = minCurv * (      sec_min1 * uv*csc2);
    float Q22 = minCurv * (1.0 + sec_min1 * v2*csc2);

    //Max singular value = max view-dependent curvature, direction
    //Can't use eigens... why exactly?
    //so we use Q^TQ (Symmetric matrix)
    float QTQ1  = Q11 * Q11 + Q21 * Q21;
    float QTQ12 = Q11 * Q12 + Q21 * Q22;
    float QTQ2  = Q12 * Q12 + Q22 * Q22;

    //Compute largest eigens of QTQ aka singular values
    //q1 : max view-dep curvature, t1 = max view-dep curvature direction
    float q1 = 0.5 * (QTQ1 + QTQ2);
    if(q1 > 0.0)
        q1 += sqrt(QTQ12*QTQ12 + 0.25 * (QTQ2-QTQ1)*(QTQ2-QTQ1));
    else
        q1 -= sqrt(QTQ12*QTQ12 + 0.25 * (QTQ2-QTQ1)*(QTQ2-QTQ1));
    
    vec2 t1 = normalize(vec2(QTQ2-q1,-QTQ12));

    q1s[id] = q1;
    t1s[id] = t1;
}