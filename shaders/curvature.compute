//Using method from "Estimating Curvatures and Their Derivatives on Triangle Meshes", Rusinkiewicz, Szymon.

#version 460 core 
//defines the size of the local work group. -> Query first ?
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
// as the number of work groups is called from the CPU with the dispatch function, I guess I can run
// dispatch with group_count = ceil(vertices.size/1024)
/*
you can write to textures with 
layout(rgba32f, binding = 0) uniform image2D img_output;
and 
imageStore(img_output, pixel_coordinates, pixel);
but I'll be using SSBOs 
*/
//You can't access VBOs inside compute shdaers.
//vec4 for SSBOs as vec3's are formatted strangely.
//SSBO for principal directions
layout(binding = 7, std430) writeonly buffer PDBuffer 
{
    vec4 PDs[];
};
//SSBO for principal curvatures
layout(binding = 8, std430) writeonly buffer curvatureBufffer{
    float curvatures[];
}
// so we'll be indexing vertices using global index with /3 and %3 I guess?
layout(binding = 9, std430) readonly buffer vertexBuffer{
    vec4 vertices[];
}
layout(binding = 10, std430) readonly buffer normalBuffer{
    vec4 normals[];
}
layout(binding = 11, std430) readonly buffer indexBuffer{
    int indices[];
}

uniform uint size;

void main(){
    //Just shove it all into 1D? Our vertex information is in a 1D array so...
    uint invocationID = gl_GlobalInvocationID.x;
    //if(invocationID%3!=0) return; //filter first vertices. 
    //-> Or alternatively run size/3 invocations!
    uint v0id;


    //Lets write max principal directions first, then min principal directions. (+ size)
    //Same with curvatures.




}