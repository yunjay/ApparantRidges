#version 460 
//Since GLSL4, doubles are enabled. Maybe swap to doubles for accuracy.
//In glsl, 1.0 -> float.(single precision)
//1.0lf -> double!

//If float atomics are supported (They're not for older devices)
#ifdef GL_EXT_shader_atomic_float
#extension GL_EXT_shader_atomic_float : require
#endif
//Using method from "Estimating Curvatures and Their Derivatives on Triangle Meshes", Rusinkiewicz, Szymon.
//defines the size of the local work group. Max is 1024 on my device (2060)
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
//layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(binding = 7, std430) buffer PDBuffer{
    vec4 PDs[];
};
//SSBO for principal curvatures
layout(binding = 8, std430)  buffer curvatureBufffer{
    float curvatures[];
};
// so we'll be indexing vertices using global index with /3 and %3 I guess?
layout(binding = 9, std430) readonly buffer vertexBuffer{
    vec4 vertices[];
};
layout(binding = 10, std430) readonly buffer normalBuffer{
    vec4 normals[];
};
layout(binding = 11, std430) readonly buffer indexBuffer{
    uint indices[];
};
layout(binding = 12, std430) coherent buffer curv1Bufffer{
    float curv1buffer[];
};
layout(binding = 13, std430) coherent buffer curv2Bufffer{
    float curv2buffer[];
};
layout(binding = 14, std430) coherent buffer curv12Bufffer{
    float curv12buffer[];
};
layout(binding = 15, std430) coherent buffer curv1IntBuffer{
    int curv1Ints[];
};
layout(binding = 16, std430) coherent buffer curv2IntBuffer{
    int curv2Ints[];
};
layout(binding = 17, std430) coherent buffer curv12IntBuffer{
    int curv12Ints[];
};
layout(binding = 30, std430) readonly buffer pointAreaBuffer{
    int pointAreas[]; //by vertex
};
layout(binding = 31, std430) readonly buffer cornerAreaBuffer{
    float cornerAreas[]; //by index
};
//Calculate by face then by vertex
uniform uint indicesSize;
uniform uint verticesSize;
void rotCoordSys(vec3 old_u,  vec3 old_v,
                          vec3 new_norm,
                          out vec3 new_u, out vec3 new_v)
{
	new_u = old_u;
	new_v = old_v;
	vec3 old_norm = cross(old_u,old_v);
	float ndot = dot(old_norm, new_norm);
	if (ndot <= -1.0) {
		new_u = -new_u;
		new_v = -new_v;
		return;
	}   
	// Perpendicular to old_norm and in the plane of old_norm and new_norm
	vec3 perp_old = new_norm - ndot * old_norm;
	// Perpendicular to new_norm and in the plane of old_norm and new_norm
	vec3 dperp = 1.0 / (1 + ndot) * (old_norm + new_norm);
	// Subtracts component along perp_old, and adds the same amount along perp_new.  
    // Leaves unchanged the component perpendicular to the
	// plane containing old_norm and new_norm.
	new_u -= dperp * (dot(new_u, perp_old));
	new_v -= dperp * (dot(new_v, perp_old));
    return;
}
void main(){
    //Just shove it all into 1D? Our vertex information is in a 1D array so...
    uint invocationID = gl_GlobalInvocationID.x; //starts with 0
    //if(invocationID%3!=0) return; //filter first vertices. 
    //-> Or alternatively run size/3 invocations
    
    //By Face -> indices
    //indices
    uint faceID = 3*invocationID;
    if(faceID >= indicesSize) return;
    
    uint vertexIds[3] = {indices[faceID],
                    indices[faceID+1],
                    indices[faceID+2]};
    //vertices
    vec3 verticesOnFace[3] = {
        vec3(vertices[vertexIds[0]]),
        vec3(vertices[vertexIds[1]]),
        vec3(vertices[vertexIds[2]])
    };
    //normals
    vec3 normalsOnFace[3]={
        normalize(vec3(normals[vertexIds[0]])),
        normalize(vec3(normals[vertexIds[1]])),
        normalize(vec3(normals[vertexIds[2]]))
    };
    //edges
    vec3 edges[3]={
        verticesOnFace[2]-verticesOnFace[1],
        verticesOnFace[0]-verticesOnFace[2],
        verticesOnFace[1]-verticesOnFace[0],
    };
    //Corner Areas of face
    float cornerAreasOnFace[3]={
        cornerAreas[faceID],
        cornerAreas[faceID+1],
        cornerAreas[faceID+2]
    };
    //Point areas of vertices on the face
    float pointAreasOnFace[3]={
        intBitsToFloat(pointAreas[vertexIds[0]]),
        intBitsToFloat(pointAreas[vertexIds[1]]),
        intBitsToFloat(pointAreas[vertexIds[2]])
    };

    //initial coordinate system by vertex
    vec3 pd1[3]={
        verticesOnFace[1]-verticesOnFace[0], 
        verticesOnFace[2]-verticesOnFace[1], 
        verticesOnFace[0]-verticesOnFace[2]
    };
    pd1[0]=normalize(cross(pd1[0],normalsOnFace[0]));
    pd1[1]=normalize(cross(pd1[1],normalsOnFace[1]));
    pd1[2]=normalize(cross(pd1[2],normalsOnFace[2]));
    
    vec3 pd2[3]={
        normalize(cross(normalsOnFace[0],pd1[0])),
        normalize(cross(normalsOnFace[1],pd1[1])),
        normalize(cross(normalsOnFace[2],pd1[2]))
    };

    //Set normal, tangent, bitangent per face
    vec3 faceTangent = normalize(edges[0]);
    vec3 faceNormal = normalize(cross(edges[0],edges[1]));
    if(dot(faceNormal,normalsOnFace[0])<0.0){faceNormal = -faceNormal;}
    vec3 faceBitangent = normalize(cross(faceNormal,faceTangent));

    //estimate curvature on face over normals' finite difference
    // m : 
    // w :
    float m[3] = { 0, 0, 0 };
	float w[3][3] = { {0,0,0}, {0,0,0}, {0,0,0} };
	for (uint i = 0; i < 3; i++) {
            //using the tangent - bitangent as uv coords
			float u = dot(edges[i],faceTangent);
			float v = dot(edges[i],faceBitangent);
			w[0][0] += u*u;
			w[0][1] += u*v;
			w[2][2] += v*v;

            uint prev = (i+2) % 3;
            uint next = (i+1) % 3;
            // finite difference for dn
			vec3 dn = normalsOnFace[prev] - normalsOnFace[next];
			float dnu = dot(dn,faceTangent);
			float dnv = dot(dn,faceBitangent);

			m[0] += dnu*u;
			m[1] += dnu*v + dnv*u;
			m[2] += dnv*v;
		}
	w[1][1] = w[0][0] + w[2][2];
	w[1][2] = w[0][1];

    //Solve least squares!
    float diagonal[3] = {0,0,0};
    //LDLT Decomposition
    float d0 = w[0][0];
    diagonal[0] = 1.0/d0;

    w[1][0]=w[0][1];
    float l10 = diagonal[0] * w[1][0];
    float d1 = w[1][1] - l10 * w[1][0];
    diagonal[1] = 1.0/d1;

    float d2 = w[2][2] - ( diagonal[0] * w[2][0] * w[2][0] ) - (diagonal[1] * w[2][1] * w[2][1]);
    diagonal[2] = 1.0/d2;
    w[2][0] = w[0][2];
    w[2][1] = w[1][2] - l10 * w[2][0];

    //Solve for LDLT decomposition
    for (int i =0;i<3;i++){
        float sum = m[i];
        for(int j=0;j<i;j++){
            sum -= w[i][j] * m[j];
        }
        m[i] = sum * diagonal[i];
    }
    for (int i = 2; i>=0; i--){
        float sum = 0;
        for (int j=i+1;j<3;j++){
            sum += w[j][i] * m[j];
        }
        m[i] -= sum * diagonal[i];
    }

    //Curvature tensor for each vertex of the face
    float curv1[3] ={0.0, 0.0, 0.0};
    float curv12[3] ={0.0, 0.0, 0.0};
    float curv2[3] ={0.0, 0.0, 0.0};
    for(int i = 0; i<3 ; i++){
        float c1,c12,c2;
        //Project curvature tensor (2nd form) from the old u,v basis (saved in pd1,pd2)
        //to the new basis (newU newV)
        //Rotate back to global coords
        vec3 newU = pd1[i]; 
        vec3 newV = pd2[i];
        vec3 pastNorm = cross(newU,newV);
        vec3 newNorm = cross(faceTangent,faceBitangent);
        float ndot = dot(pastNorm,newNorm);
        if (ndot <= -1.0) {
		    newU = -newU;
		    newV = -newV;
	    }
        else{
            //vec perpendicular to pastNorm in plane of pastNorm and newNorm
            vec3 perpendicularToPast = newNorm - ndot * pastNorm;
            // difference between perpendiculars
            vec3 diffPerp = 1.0 / (1.0+ndot) * (pastNorm + newNorm);
            newU -= diffPerp * dot(newU,perpendicularToPast);
            newV -= diffPerp * dot(newV,perpendicularToPast);
        }
        
        // projection
        float u1 = dot(newU,faceTangent);
        float v1 = dot(newU,faceBitangent);
        float u2 = dot(newV,faceTangent);
        float v2 = dot(newV,faceBitangent);

        c1 = m[0] * u1 * u1 + m[1] * (2.0 * u1 * v1) + m[2] * v1*v1;
        c12= m[0] * u1 * u2 + m[1] * (u1*v2 + u2*v1) + m[2] * v1*v2;
        c2 = m[0] * u2 * u2 + m[1] * (2.0 * u2 * v2) + m[2] * v2*v2;
        
        //weight = corner area / point area 
        // Voronoi area weighting. 
        float wt = cornerAreasOnFace[i] / pointAreasOnFace[i];

        curv1[i] += wt*c1;
        curv12[i] += wt*c12;
        curv2[i] += wt*c2;
    }
    
    //Is it ok to add concurrently?
    //NO!!!
    //Not safe to write to the same index of a SSBO from multiple instances!
    /*
#ifdef GL_EXT_shader_atomic_float
    atomicAdd(curv1buffer[v0id], curv1[0]);
    atomicAdd(curv1buffer[v1id], curv1[1]);
    atomicAdd(curv1buffer[v2id], curv1[2]);
    
    atomicAdd(curv2buffer[v0id], curv2[0]);
    atomicAdd(curv2buffer[v1id], curv2[1]);
    atomicAdd(curv2buffer[v2id], curv2[2]);
    
    atomicAdd(curv12buffer[v0id], curv12[0]);
    atomicAdd(curv12buffer[v1id], curv12[1]);
    atomicAdd(curv12buffer[v2id], curv12[2]);
#endif
#ifndef GL_EXT_shader_atomic_float
#endif
    */ 
//For future devices
    
    //Because my machine doesn't allow atomic floats, (NVidia new cards do, but not AMD anyway.)
    //Implemented "await" like code for checking if the data is being changed by another invocation.
    for(int i =0;i<3;i++){
        float toAdd = curv1[i];
        int expected = curv1Ints[vertexIds[i]];
        //Input float we want to put into the memory (curv1current[vec]+curv1sum[vec])
        float toInput = intBitsToFloat(curv1Ints[vertexIds[i]]) + toAdd;
        //Atomically compare the int encodeded float value with our expected value
        //float encoded to int with floatBitsToInt, bc atomics aren't supported for floats in OpenGL.
        //If true, we add successfully and end.  
        //atomic compare and swap (if compare is true, swaps data with 3rd parameter. if(a==b)a=c;)
        //returns original value at mem (first parameter) 
        int returned = atomicCompSwap(curv1Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        //If it failed, as in the returned value is different from our original value,
        //it means a different invocation updated it, so we update our original value and try again.
        while(returned != expected){
            //update values
            expected = returned; 
            toInput = intBitsToFloat(expected) + toAdd;
            returned = atomicCompSwap(curv1Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        }
        // Now we do this for all three values of the curvature tensor (symmetric 2x2 matrix)
        // Could we make this a function..? How do I send memory locations without pointers though?
        toAdd = curv2[i];
        expected = curv2Ints[vertexIds[i]];
        toInput = intBitsToFloat(curv2Ints[vertexIds[i]]) + toAdd;
        returned = atomicCompSwap(curv2Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        while(returned != expected){
            //update values
            expected = returned; 
            toInput = intBitsToFloat(expected) + toAdd;
            returned = atomicCompSwap(curv2Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        }

        toAdd = curv12[i];
        expected = curv12Ints[vertexIds[i]];
        toInput = intBitsToFloat(curv12Ints[vertexIds[i]]) + toAdd;
        returned = atomicCompSwap(curv12Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        while(returned != expected){
            //update values
            expected = returned; 
            toInput = intBitsToFloat(expected) + toAdd;
            returned = atomicCompSwap(curv12Ints[vertexIds[i]],expected,floatBitsToInt(toInput));
        }

    }

    //intial coords
    for(int i =0 ; i<3 ; i++){
        PDs[vertexIds[i]] = vec4(pd1[i],0.0);
        PDs[vertexIds[i]+verticesSize] = vec4(pd2[i],0.0);
    }
}

//In retrospect using a VS-GS-FS pipeline to calculate these per face on the GS MIGHT have been easier.