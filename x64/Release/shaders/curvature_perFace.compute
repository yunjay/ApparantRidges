#version 430 core 
//Using method from "Estimating Curvatures and Their Derivatives on Triangle Meshes", Rusinkiewicz, Szymon.
//defines the size of the local work group. Max is 1024 on my device (2060)
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 7, std430)  buffer PDBuffer{
    vec4 PDs[];
};
//SSBO for principal curvatures
layout(binding = 8, std430)  buffer curvatureBufffer{
    float curvatures[];
};
// so we'll be indexing vertices using global index with /3 and %3 I guess?
layout(binding = 9, std430) readonly buffer vertexBuffer{
    vec4 vertices[];
};
layout(binding = 10, std430) readonly buffer normalBuffer{
    vec4 normals[];
};
layout(binding = 11, std430) readonly buffer indexBuffer{
    uint indices[];
};
layout(binding = 12, std430)  buffer curv1Bufffer{
    float curv1buffer[];
};
layout(binding = 13, std430)  buffer curv2Bufffer{
    float curv2buffer[];
};
layout(binding = 14, std430)  buffer curv12Bufffer{
    float curv12buffer[];
};

layout(binding = 30, std430) buffer pointAreaBuffer{
    float pointAreas[]; //by vertex
};
layout(binding = 31, std430) buffer cornerAreaBuffer{
    float cornerAreas[]; //by index
};
//Calculate by face then by vertex
uniform uint indicesSize;
uniform uint verticesSize;
void main(){
    //Just shove it all into 1D? Our vertex information is in a 1D array so...
    uint invocationID = gl_GlobalInvocationID.x; //starts with 0
    //if(invocationID%3!=0) return; //filter first vertices. 
    //-> Or alternatively run size/3 invocations
    
    //By Face -> indices
    //indices
    uint faceID = 3*invocationID;
    if(faceID >= indicesSize) return;
    
    uint v0id=indices[faceID];
    uint v1id=indices[faceID+1];
    uint v2id=indices[faceID+2]; 
    
    //vertices
    vec3 verticesOnFace[3] = {
        vec3(vertices[v0id]),
        vec3(vertices[v1id]),
        vec3(vertices[v2id])
    };
    //normals
    vec3 normalsOnFace[3]={
        vec3(normals[v0id]),
        vec3(normals[v1id]),
        vec3(normals[v2id])
    };
    //edges
    vec3 edges[3]={
        /*
        normalize(verticesOnFace[2]-verticesOnFace[1]),
        normalize(verticesOnFace[0]-verticesOnFace[2]),
        normalize(verticesOnFace[1]-verticesOnFace[0]),
        */
        verticesOnFace[2]-verticesOnFace[1],
        verticesOnFace[0]-verticesOnFace[2],
        verticesOnFace[1]-verticesOnFace[0],
    };
    //Corner Areas of face
    float cornerAreasOnFace[3]={
        cornerAreas[faceID],
        cornerAreas[faceID+1],
        cornerAreas[faceID+2]
    };
    //Point areas of vertices on the face
    float pointAreasOnFace[3]={
        pointAreas[v0id],
        pointAreas[v1id],
        pointAreas[v2id]
    };

    //initial coordinate system by vertex
    vec3 pd1[3]={
        verticesOnFace[1]-verticesOnFace[0], 
        verticesOnFace[2]-verticesOnFace[1], 
        verticesOnFace[0]-verticesOnFace[2]
    };
    pd1[0]=normalize(cross(pd1[0],normalsOnFace[0]));
    pd1[1]=normalize(cross(pd1[1],normalsOnFace[1]));
    pd1[2]=normalize(cross(pd1[2],normalsOnFace[2]));
    
    vec3 pd2[3]={
        normalize(cross(normalsOnFace[0],pd1[0])),
        normalize(cross(normalsOnFace[1],pd1[1])),
        normalize(cross(normalsOnFace[2],pd1[2]))
    };

    //Set normal, tangent, bitangent per face
    vec3 faceTangent = normalize(edges[0]);
    vec3 faceNormal = normalize(cross(edges[0],edges[1]));
    //vec3 faceNormal = normalize(cross(edges[1],edges[0]));
    if(dot(faceNormal,normalsOnFace[0])<0.0){faceNormal = -faceNormal;}
    vec3 faceBitangent = normalize(cross(faceNormal,faceTangent));

    //estimate curvature on face over normals' finite difference
    // m : 
    // w :
    float m[3] = { 0, 0, 0 };
	float w[3][3] = { {0,0,0}, {0,0,0}, {0,0,0} };
	for (int i = 0; i < 3; i++) {
            //using the tangent - bitangent as uv coords
			float u = dot(edges[i],faceTangent);
			float v = dot(edges[i],faceBitangent);
			w[0][0] += u*u;
			w[0][1] += u*v;
			w[2][2] += v*v;

            uint prev = (i+2) % 3;
            uint next = (i+1) % 3;
            // finite difference for dn
			vec3 dn = normalsOnFace[prev] - normalsOnFace[next];
			float dnu = dot(dn,faceTangent);
			float dnv = dot(dn,faceBitangent);

			m[0] += dnu*u;
			m[1] += dnu*v + dnv*u;
			m[2] += dnv*v;
		}
	w[1][1] = w[0][0] + w[2][2];
	w[1][2] = w[0][1];

    //Solve least squares!
    float diagonal[3] = {0,0,0};
    //LDLT Decomposition
    float d0 = w[0][0];
    diagonal[0] = 1.0/d0;

    w[1][0]=w[0][1];
    float l10 = diagonal[0] * w[1][0];
    float d1 = w[1][1] - l10 * w[1][0];
    diagonal[1] = 1.0/d1;

    float d2 = w[2][2] - ( diagonal[0] * w[2][0] * w[2][0] ) - (diagonal[1] * w[2][1] * w[2][1]);
    diagonal[2] = 1.0/d2;
    w[2][0] = w[0][2];
    w[2][1] = w[1][2] - l10 * w[2][0];

    //Solve for LDLT decomposition
    for (int i =0;i<3;i++){
        float sum = m[i];
        for(int j=0;j<i;j++){
            sum -= w[i][j] * m[j];
        }
        m[i] = sum * diagonal[i];
    }
    for (int i = 2; i>=0; i--){
        float sum = 0;
        for (int j=i+1;j<3;j++){
            sum += w[j][i] * m[j];
        }
        m[i] -= sum * diagonal[i];
    }
    //Curvature tensor for each vertex of the face
    float curv1[3] ={0.0, 0.0, 0.0};
    float curv12[3] ={0.0, 0.0, 0.0};
    float curv2[3] ={0.0, 0.0, 0.0};
    for(int i = 0; i<3 ; i++){
        float c1,c12,c2;
        //Project curvature tensor (2nd form) from the old u,v basis (saved in pd1,pd2)
        //to the new basis
        //Rotate back to global coords
        vec3 newU = pd1[i]; 
        vec3 newV = pd2[i];
        vec3 pastNorm = cross(newU,newV);
        vec3 newNorm = cross(faceTangent,faceBitangent);
        float ndot = dot(pastNorm,newNorm);
        if (ndot <= -1.0f) {
		    newU = -newU;
		    newV = -newV;
	    }
        else{
            //vec perpendicular to pastNorm in plane of pastNorm and newNorm
            vec3 perpendicularToPast = newNorm - ndot * pastNorm;
            // difference between perpendiculars
            vec3 diffPerp = 1.0 / (1+ndot) * (pastNorm + newNorm);
            newU -= diffPerp * dot(newU,perpendicularToPast);
            newV -= diffPerp * dot(newV,perpendicularToPast);
        }
        
        // projection
        float u1 = dot(newU,faceTangent);
        float v1 = dot(newU,faceBitangent);
        float u2 = dot(newV,faceTangent);
        float v2 = dot(newV,faceBitangent);

        c1 = m[0] * u1 * u1 + m[1] * (2.0 * u1 * v1) + m[2] * v1*v1;
        c12= m[0] * u1 * u2 + m[1] * (u1*v2 + u2*v1) + m[2] * v1*v2;
        c2 = m[0] * u2 * u2 + m[1] * (2.0 * u2 * v2) + m[2] * v2*v2;
        
        //weight = corner area / point area 
        // Voronoi area weighting. TODO
        //float wt = 0.2;
        float wt = cornerAreasOnFace[i] / pointAreasOnFace[i];

        curv1[i] += wt*c1;
        curv12[i] += wt*c12;
        curv2[i] += wt*c2;
    }
    
    //Is it ok to add concurrently?
    curv1buffer[v0id] += curv1[0];
    curv1buffer[v1id] += curv1[1];
    curv1buffer[v2id] += curv1[2];

    curv2buffer[v0id] += curv2[0];
    curv2buffer[v1id] += curv2[1];
    curv2buffer[v2id] += curv2[2];

    curv12buffer[v0id] += curv12[0];
    curv12buffer[v1id] += curv12[1];
    curv12buffer[v2id] += curv12[2];


    //intial coords
    PDs[v0id] = vec4(pd1[0],0.0);
    PDs[v1id] = vec4(pd1[1],0.0);
    PDs[v2id] = vec4(pd1[2],0.0);

    PDs[v0id+verticesSize] = vec4(pd2[0],0.0);
    PDs[v1id+verticesSize] = vec4(pd2[1],0.0);
    PDs[v2id+verticesSize] = vec4(pd2[2],0.0);
//In retrospect using a VS-GS-FS pipeline to calculate these per face on the GS MIGHT have been easier.
}