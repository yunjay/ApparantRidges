#version 460
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
//layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(binding = 7, std430) readonly buffer PDBuffer {
    vec4 PDs[];
};
layout(binding = 8, std430) readonly buffer curvatureBufffer{
    float curvatures[];
};
layout(binding = 9, std430) readonly buffer vertexBuffer{
    vec4 vertices[];
};
layout(binding = 10, std430) readonly buffer normalBuffer{
    vec4 normals[];
};
layout(binding = 11, std430) readonly buffer indexBuffer{
    uint indices[];
};
layout(binding = 20, std430) readonly buffer adjacentFacesBuffer{
    int adjFaces[][20];
};
layout(binding = 21, std430) readonly buffer q1Buffer{
    float q1s[];
};
layout(binding = 22, std430) readonly buffer t1Buffer{
    vec2 t1s[];
};
layout(binding = 23, std430) coherent buffer Dt1q1Buffer{
    float Dt1q1s[];
};
layout(binding=42, std430) buffer DumpBuffer{
    float dump[];
};
//single precision floats have about 7 digits of precision.
const float epsilon = 1e-6; 
const float MAX_FLOAT = 3.402823466e+38;
const float SMALLEST_FLOAT = 1.175494351e-38;

uniform uint verticesSize;
//We need to calculate the derivative view-dep max curvature in max direction for each veretx,
//by iterating all adjacent faces of the vertex looking for direction t1 and computing
//the curvature from there.
uniform vec3 viewPosition;
uniform mat4 model;
void main(){
    float nanDetected = 0.0;

    uint id = gl_GlobalInvocationID.x;
    if(id>verticesSize)return;
    
    vec3 v0 = vec3(vertices[id]);
    v0 = vec3(model*vec4(v0,1.0));

    vec3 normal = normals[id].xyz;
    normal = normalize(transpose(inverse(mat3(model))) * normal);

    //vec3 viewDir = normalize(viewPosition - v0);
    vec3 viewDir = normalize(viewPosition - v0); 
    //float normalDotView = dot(viewDir,normal);
    float normalDotView = dot(viewDir,normal);
    if (abs(normalDotView) < epsilon) {
        nanDetected+=0.4;
        normalDotView = epsilon * sign(normalDotView);
    }
    

    //vec3 maxPD = PDs[id].xyz;
    //vec3 minPD = PDs[id+verticesSize].xyz;
    //vec3 maxPD = normalize(vec3(model*vec4(PDs[id].xyz,0.0)));
    //vec3 minPD = normalize(vec3(model*vec4(PDs[id+verticesSize].xyz,0.0)));
    vec3 maxPD = normalize(vec3(transpose(inverse(mat3(model)))*PDs[id].xyz));
    vec3 minPD = normalize(vec3(transpose(inverse(mat3(model)))*PDs[id+verticesSize].xyz));

    float viewDepCurv = q1s[id];
    vec2 t1 = t1s[id]; //max curv direction with local coords

    vec3 world_t1 = t1[0] * maxPD + t1[1] * minPD;
    //world_t1 = vec3(model*vec4(world_t1,0.0));
    //world_t1 = transpose(inverse(mat3(model))) * world_t1;
    //vec3 world_t2 = cross(normal,world_t1);
    vec3 world_t2 = cross(world_t1,normal);
    world_t2 = normalize(world_t2);
    //world_t2 = normalize(mat3(transpose(inverse(model))) * world_t2);
    float v0_dot_t2 = dot(v0,world_t2);
    float Dt1q1 = 0.0;
    int n = 0;
    //for 10 pairs of adjacent vertices
    float w1;
    float v1_dot_t2;
    float v2_dot_t2;  
    float printw1;
    for(int i =0;i<10;i++){
        int v1id = adjFaces[id][2*i]; //0 2 4 index
        int v2id = adjFaces[id][2*i+1]; //1 3 5 index
        if(v1id<0 || v2id<0) break; //empty indices set to -1
        //adjacent vertices
        
        //vec3 v1 = vertices[v1id].xyz;
        //vec3 v2 = vertices[v2id].xyz;
        
        vec3 v1 = vec3(model*vec4(vertices[v1id].xyz,1.0));
        vec3 v2 = vec3(model*vec4(vertices[v2id].xyz,1.0));
        
        //find point p between v1 and v2 by linear interpolation
        //v0 is along t1, perp to t2
        // p = w1*v1 + w2*v2, where w2 = 1-w1
        v1_dot_t2 = dot(v1,world_t2);
        v2_dot_t2 = dot(v2,world_t2);  
        //float w1;
        if (abs(v2_dot_t2 - v1_dot_t2) < epsilon*1024.0){
            w1 =  (v2_dot_t2*1024.0 - v0_dot_t2*1024.0) / (v2_dot_t2*1024.0 - v1_dot_t2*1024.0);
        }
        //if (abs(v2_dot_t2 - v1_dot_t2) > epsilon) {
        else w1 = (v2_dot_t2 - v0_dot_t2) / (v2_dot_t2 - v1_dot_t2); 
        //}
        //else {
        //     nanDetected+=0.2;
        //     w1 = (v2_dot_t2 - v0_dot_t2) / epsilon * sign(v2_dot_t2 - v1_dot_t2);
        //}
        //else w1 = MAX_FLOAT;

        //having issues with w1 not triggering for any neighbors.
        //if w1 is not in range [0,1) skip
        if(w1<0.0 || w1>1.0) continue;
        printw1=w1;
        //construct point
        float w2 = 1.0 - w1;
        vec3 p = w1 * v1 + w2 * v2;

        //interpolate view dep curvature at the point
        float interpViewDepCurv = w1*q1s[v1id] + w2*q1s[v2id];  

        //this will get shorter if the model turns away (intuitive)
        float projDistance = dot((p-v0),world_t1);        
        projDistance *= abs(normalDotView);

        //finally take projected view dep curvature derivative
        //if(abs(projDistance)<epsilon) {Dt1q1=MAX_FLOAT; break;}
        if(abs(interpViewDepCurv - viewDepCurv)<epsilon) {
            nanDetected+=0.2;
			interpViewDepCurv = epsilon+viewDepCurv;
		}   
        if(abs(projDistance) > epsilon) {
            float thisDt1q1 = (interpViewDepCurv - viewDepCurv) / projDistance;
            //if(isnan(thisDt1q1)) continue;
            Dt1q1 += thisDt1q1;
            n++;
        }
        else {
            nanDetected+=0.4;
            projDistance = epsilon *sign(projDistance);
            float thisDt1q1 = (interpViewDepCurv - viewDepCurv) / projDistance;
            //if(isnan(thisDt1q1)) continue;
            Dt1q1 += thisDt1q1;
            n++;
        }

        if(n==2){break;} //max n on a manifold is 2 anyway

    }
    if(n!=0) Dt1q1 = Dt1q1 / float(n);
    /*
    if (abs(Dt1q1) > MAX_FLOAT / 64.0) Dt1q1 = MAX_FLOAT / 64.0 * sign(Dt1q1);
    if (abs(Dt1q1) < SMALLEST_FLOAT * 64.0) Dt1q1 = SMALLEST_FLOAT * 64.0 * sign(Dt1q1);
    */

    Dt1q1s[id] = Dt1q1;

    //debugging
    //uniforms are fine
    //Dt1q1s[id] =v0_dot_t2;
    //Dt1q1s[id] = abs(dot(world_t1,maxPD)); //close to 1, figures.
    //Dt1q1s[id] = abs(dot(world_t2,maxPD)); //fine
    //Dt1q1s[id] = abs(Dt1q1);//the sign seems to be weird, the absolute value is fine.
    
    //Dt1q1s[id] = float(n)/2.0;
    
    //Dt1q1s[id] = nanDetected; //epsilon basically never triggered.
    //bool isDt1q1zero = (abs(Dt1q1) <=epsilon);
    //Dt1q1s[id] = float(isDt1q1zero);
    //Dt1q1s[id] = w1;
    //Dt1q1s[id] = printw1;
    //Dt1q1s[id] = v0_dot_t2/v1_dot_t2;
    //Dt1q1s[id] = v0_dot_t2/v2_dot_t2;
}


//GLSL uses short circuit (eager/lazy) evaluation so the first argument should be
//the cheaper/more likely one so the second evaluation is run less. 